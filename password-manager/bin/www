#!/usr/bin/env node

/**
 * Module dependencies.
 */
var path = require('path');
var database = require('../config/database');
var app = require('../app');
var debug = require('debug')('fatbot-express:server');
var mongoose = require('mongoose');
var fs = require('fs'),
    http = require('http'),
    https = require('https'),
    express = require('express');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


/**
 * Sets up SSL params

 var options = {
     key: fs.readFileSync(path.join(__dirname, '../ssl/my-server.key.pem')),
     cert: fs.readFileSync(path.join(__dirname, '../ssl/my-server.crt.pem')),
		 ca: fs.readFileSync(path.join(__dirname, '../ssl/ca-crt.pem')),
		 requestCert: true,
		 rejectUnauthorized: true,
 };
**/
 /**
  * Create HTTP server.
  */

	var server = http.createServer(app).listen(port, function(){
	  console.log("Express server listening on port " + port);
	});

var db = mongoose.connect(database.mongoDb.url);

//attach lister to connected event
mongoose.connection.once('connected', function() {
	console.log("Connected to database")
});


/**
 * Listen on provided port, on all network interfaces.
 */
/*
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
*/
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
